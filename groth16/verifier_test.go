package groth16

import (
	"encoding/hex"
	"testing"

	"github.com/datachainlab/go-risc0-verifier/risc0"
)

func TestVerifyIntegrityV11(t *testing.T) {
	claimDigest_, err := hex.DecodeString("9cbe0c90f193cb5e5716c6bc1a780f164ca05254b8bd50485109d9d29544ea33")
	if err != nil {
		t.Fatal(err)
	}
	seal, err := hex.DecodeString("50bd1769188540e643a5e4b1548e4c9391b0359afc1488d25fbfe41395e8847079f64d55148c07b36f0d2d44bfbdcdbe9fc79b48062a75dec02bbd5bfd5e3e530f8fa1520a5f1d99b7cf0bd29b0dbdb4fa65186559593e2c415f1e8ce27ab302cacc917a1db4a97e49f4d82194363c3af262c3b0bcf57fe846130012d081cc8c1fc0337d0de1958f4e4c5755815559104d7576a3bfc0f5fffdb630eace4cc76a5f3b617210692dedcde61b1e581a1700476ae51fa573e0adc0405dcef88e6b902f1364be01080d0fbc1429093d77b320405ff81037e7d1ba6e029baa155b71283e10cbee1e6f5375ed061c83c8ce7e3123774ce8debfd9e90e34c95429eda72d688594b1")
	if err != nil {
		t.Fatal(err)
	}
	var claimDigest [32]byte
	copy(claimDigest[:], claimDigest_)
	p, ok := GetVerifierParameters2(seal[:4])
	if !ok {
		t.Fatal("GetVerifierParameters2 failed")
	}
	err = verifyIntegrity(p, seal[4:], claimDigest)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVerifyIntegrityV13(t *testing.T) {
	journal, err := hex.DecodeString("0000000300000000050000001100906ed50000a1acc73eb45794fa1734f14d882e91925b6006f79d3bb2460df9d01b333d700900000000679f4f740000000067c6d52915150b07ff800e00000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000070000000000000026ae825ffce1cf9dcdf682614f4d36704e7bca087bbb5264aca9301d7824cec8000000000000000000000000000000000000000000000000000000000000000083d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ce62d98178a799a876bcb77021ee98d13071c4ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e494e54454c2d53412d3030333334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e494e54454c2d53412d3030363135000000000000000000000000000000000000")
	if err != nil {
		t.Fatal(err)
	}
	imageIdBz, err := hex.DecodeString("a8980764a673186b94ec3bd1cc90dc6553b1117014cc387905edc01e53ba0c97")
	if err != nil {
		t.Fatal(err)
	}
	var imageId [32]byte
	copy(imageId[:], imageIdBz)
	claimDigest := risc0.CalculateClaimDigest(imageId, sha256(journal))
	seal, err := hex.DecodeString("922fe23d2cbcd0f7dd6e2dcd125454a25bc7451e3fcfe69bc74c620afbf090685d2445d31e7cd0ea42b87264e8b3d633dcde9df5f4c5c345b07d05b08d6d9ac9e69bdc622a6872889033a687c6090a1ba689b72aac803ea644bb3119f51919339911a8f22d4e15f27a4af490d6fd2bde7b9b9b3d13ec4b547297503b20e4cac86f1f72c60d997cd0d1a79e290c1149321ac16e64b5e0889d9cdd0563329021d0816f17a82a4c50ca405fc8f4e8deeae7f5cc029823c9d7b454e2a55341e5285907c13b661e747895f55dfb2205c72fb08d1a6744a7c15291214d3c7f960ff0e4be9d311f07ddd9562c157139146fe9badd109a48ce3f1cfa0822187f4d384b99471ebe91")
	if err != nil {
		t.Fatal(err)
	}
	p, ok := GetVerifierParameters2(seal[:4])
	if !ok {
		t.Fatal("GetVerifierParameters2 failed")
	}
	err = verifyIntegrity(p, seal[4:], claimDigest)
	if err != nil {
		t.Fatal(err)
	}
}
