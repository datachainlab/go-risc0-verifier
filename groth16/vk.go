package groth16

import (
	"fmt"

	"github.com/iden3/go-rapidsnark/verifier/bn256"
)

// https://github.com/risc0/risc0/blob/v1.0.5/groth16_proof/groth16/verifier.sol
var (
	_vk = newVerificationKey()

	vkDigest = verifierKeyDigest()
)

// VK is the Verification Key data structure in bn256 format.
type VK struct {
	Alpha *bn256.G1
	Beta  *bn256.G2
	Gamma *bn256.G2
	Delta *bn256.G2
	IC    []*bn256.G1
}

func newVerificationKey() VK {
	var vk VK = VK{
		Alpha: new(bn256.G1),
		Beta:  new(bn256.G2),
		Gamma: new(bn256.G2),
		Delta: new(bn256.G2),
		IC:    make([]*bn256.G1, 6),
	}
	alphas := getAlphas()
	if _, err := vk.Alpha.Unmarshal(
		concatBytes32(
			alphas[0],
			alphas[1],
		),
	); err != nil {
		panic(fmt.Errorf("failed to unmarshal alpha: %w", err))
	}
	betas := getBetas()
	if _, err := vk.Beta.Unmarshal(
		concatBytes32(
			betas[0],
			betas[1],
			betas[2],
			betas[3],
		),
	); err != nil {
		panic(fmt.Errorf("failed to unmarshal beta: %w", err))
	}
	gammas := getGammas()
	if _, err := vk.Gamma.Unmarshal(
		concatBytes32(
			gammas[0],
			gammas[1],
			gammas[2],
			gammas[3],
		),
	); err != nil {
		panic(fmt.Errorf("failed to unmarshal gamma: %w", err))
	}
	deltas := getDeltas()
	if _, err := vk.Delta.Unmarshal(
		concatBytes32(
			deltas[0],
			deltas[1],
			deltas[2],
			deltas[3],
		),
	); err != nil {
		panic(fmt.Errorf("failed to unmarshal delta: %w", err))
	}
	ics := getICs()
	for i, ic := range ics {
		vk.IC[i] = new(bn256.G1)
		if _, err := vk.IC[i].Unmarshal(
			concatBytes32(ic[0], ic[1]),
		); err != nil {
			panic(fmt.Errorf("failed to unmarshal IC[%d]: %w", i, err))
		}
	}
	return vk
}

func verifierKeyDigest() [32]byte {
	ics := getICs()
	icDigests := make([][32]byte, 6)
	for i, ic := range ics {
		icDigests[i] = sha256(append(ic[0][:], ic[1][:]...))
	}
	var (
		alphas = getAlphas()
		betas  = getBetas()
		gammas = getGammas()
		deltas = getDeltas()
	)

	var data []byte
	data = append(data, sha256Bytes([]byte("risc0_groth16.VerifyingKey"))...)
	data = append(data, sha256Items(alphas[0], alphas[1])...)
	data = append(data, sha256Items(betas[0], betas[1], betas[2], betas[3])...)
	data = append(data, sha256Items(gammas[0], gammas[1], gammas[2], gammas[3])...)
	data = append(data, sha256Items(deltas[0], deltas[1], deltas[2], deltas[3])...)
	data = append(data, taggedList(sha256([]byte("risc0_groth16.VerifyingKey.IC")), icDigests)...)
	data = append(data, []byte{0x05, 0x00}...)
	return sha256(data)
}

/*
uint256 constant alphax = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
uint256 constant alphay = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
*/
func getAlphas() [2][32]byte {
	return [2][32]byte{
		parseBigInt("20491192805390485299153009773594534940189261866228447918068658471970481763042"),
		parseBigInt("9383485363053290200918347156157836566562967994039712273449902621266178545958"),
	}
}

/*
uint256 constant betax1 = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
uint256 constant betax2 = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
uint256 constant betay1 = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
uint256 constant betay2 = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
*/
func getBetas() [4][32]byte {
	return [4][32]byte{
		parseBigInt("4252822878758300859123897981450591353533073413197771768651442665752259397132"),
		parseBigInt("6375614351688725206403948262868962793625744043794305715222011528459656738731"),
		parseBigInt("21847035105528745403288232691147584728191162732299865338377159692350059136679"),
		parseBigInt("10505242626370262277552901082094356697409835680220590971873171140371331206856"),
	}
}

/*
uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
*/
func getGammas() [4][32]byte {
	return [4][32]byte{
		parseBigInt("11559732032986387107991004021392285783925812861821192530917403151452391805634"),
		parseBigInt("10857046999023057135944570762232829481370756359578518086990519993285655852781"),
		parseBigInt("4082367875863433681332203403145435568316851327593401208105741076214120093531"),
		parseBigInt("8495653923123431417604973247489272438418190587263600148770280649306958101930"),
	}
}

/*
uint256 constant deltax1 = 1668323501672964604911431804142266013250380587483576094566949227275849579036;
uint256 constant deltax2 = 12043754404802191763554326994664886008979042643626290185762540825416902247219;
uint256 constant deltay1 = 7710631539206257456743780535472368339139328733484942210876916214502466455394;
uint256 constant deltay2 = 13740680757317479711909903993315946540841369848973133181051452051592786724563;
*/
func getDeltas() [4][32]byte {
	return [4][32]byte{
		parseBigInt("1668323501672964604911431804142266013250380587483576094566949227275849579036"),
		parseBigInt("12043754404802191763554326994664886008979042643626290185762540825416902247219"),
		parseBigInt("7710631539206257456743780535472368339139328733484942210876916214502466455394"),
		parseBigInt("13740680757317479711909903993315946540841369848973133181051452051592786724563"),
	}
}

/*
uint256 constant IC0x = 8446592859352799428420270221449902464741693648963397251242447530457567083492;
uint256 constant IC0y = 1064796367193003797175961162477173481551615790032213185848276823815288302804;

uint256 constant IC1x = 3179835575189816632597428042194253779818690147323192973511715175294048485951;
uint256 constant IC1y = 20895841676865356752879376687052266198216014795822152491318012491767775979074;

uint256 constant IC2x = 5332723250224941161709478398807683311971555792614491788690328996478511465287;
uint256 constant IC2y = 21199491073419440416471372042641226693637837098357067793586556692319371762571;

uint256 constant IC3x = 12457994489566736295787256452575216703923664299075106359829199968023158780583;
uint256 constant IC3y = 19706766271952591897761291684837117091856807401404423804318744964752784280790;

uint256 constant IC4x = 19617808913178163826953378459323299110911217259216006187355745713323154132237;
uint256 constant IC4y = 21663537384585072695701846972542344484111393047775983928357046779215877070466;

uint256 constant IC5x = 6834578911681792552110317589222010969491336870276623105249474534788043166867;
uint256 constant IC5y = 15060583660288623605191393599883223885678013570733629274538391874953353488393;
*/
func getICs() [6][2][32]byte {
	return [6][2][32]byte{
		{
			parseBigInt("8446592859352799428420270221449902464741693648963397251242447530457567083492"),
			parseBigInt("1064796367193003797175961162477173481551615790032213185848276823815288302804"),
		},
		{
			parseBigInt("3179835575189816632597428042194253779818690147323192973511715175294048485951"),
			parseBigInt("20895841676865356752879376687052266198216014795822152491318012491767775979074"),
		},
		{
			parseBigInt("5332723250224941161709478398807683311971555792614491788690328996478511465287"),
			parseBigInt("21199491073419440416471372042641226693637837098357067793586556692319371762571"),
		},
		{
			parseBigInt("12457994489566736295787256452575216703923664299075106359829199968023158780583"),
			parseBigInt("19706766271952591897761291684837117091856807401404423804318744964752784280790"),
		},
		{
			parseBigInt("19617808913178163826953378459323299110911217259216006187355745713323154132237"),
			parseBigInt("21663537384585072695701846972542344484111393047775983928357046779215877070466"),
		},
		{
			parseBigInt("6834578911681792552110317589222010969491336870276623105249474534788043166867"),
			parseBigInt("15060583660288623605191393599883223885678013570733629274538391874953353488393"),
		},
	}
}
